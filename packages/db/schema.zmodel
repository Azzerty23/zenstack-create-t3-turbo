// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

plugin trpc {
    provider = '@zenstackhq/trpc'
    output = '../api/src/trpc/generated'
}

model Post {
    id       String  @id @default(cuid())
    title    String
    content  String
    author   User    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    // everyone can read posts
    @@allow('create,read', true)

    // only the author can update or delete their own posts
    @@allow('update,delete', author == auth())
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    password      String?   @password @omit
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]

    // everyone can signup, and user profile is also publicly readable
    @@allow('create,read', true)
    
    // only the user can update or delete their own profile
    @@allow('update,delete', auth() == this)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
